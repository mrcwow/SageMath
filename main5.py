import math
from scipy.stats import laplace
import scipy.stats

f = open("population.csv", "r")
sel = []
for i in range(0, 4):
    f.readline()
for i in range(0, 109):
    sel.append(int(f.readline().split(',')[0]))
print(sel)

# –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä—è–¥
sel_v = sel.copy()
sel_v = sorted(set(sel_v))
print("----- –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä—è–¥")
print(sel_v)
fr = []
for i in sel_v:
    fr.append(sel.count(i))
print(fr)
sel_vfr = sel_v.copy()
for i in range(0, len(sel_vfr)):
    sel_vfr[i] = [sel_vfr[i], fr[i], round(fr[i]/109, 2)]
print(sel_vfr)

# —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—è–¥
sel_r = sel.copy()
sel_r.sort()
print("----- —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—è–¥")
print(sel_r)

# –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä—è–¥
s = sel.copy()
s = sorted(set(s))
print("----- –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä—è–¥")
k = math.floor(1 + math.log2(109))
print("k =", k)
ma = max(s)
mi = min(s)
h = int((ma - mi)/k)
print("h =", h)
ni = []
ni += [sel.count(i) for i in range(mi, mi+h+1)]
ni = sum(ni)
ni_list = [ni]
pi_list = [round(ni/109, 2)]
int_list = [[mi, mi + h]]
print("[", mi, mi+h, "]", ni, round(ni/109, 2))
mic = mi + h
for i in range(k-1):
    ni = []
    ni += [sel.count(i) for i in range(mic + 1, mic + h + 1)]
    ni = sum(ni)
    ni_list.append(ni)
    pi_list.append(round(ni / 109, 2))
    int_list.append([mic, mic + h])
    print("(", mic, mic + h, "]", ni, round(ni / 109, 2))
    mic = mic + h

# –≥—Ä–∞—Ñ–∏–∫–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç

# –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç

# —Å–µ—Ä–µ–¥–∏–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
int2_list = [(i + j)/2 for i, j in int_list]
acc_ni_list = []
temp = 0
for i in ni_list:
    temp += i
    acc_ni_list.append(temp)
print("–°–µ—Ä–µ–¥–∏–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: ", int2_list)
print("–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã: ", acc_ni_list)

# —É—Å–ª–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
mid = int2_list[3]
if_list = []
for i in int2_list:
    if_list.append(int((i - mid)/h))
print("–£—Å–ª–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ", if_list)

# –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ —Å—Ä–µ–¥–Ω–µ–µ –∏ –¥–∏—Å–ø–µ—Ä—Å–∏—é. –í—ã—á–∏—Å–ª–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤—ã–±–æ—Ä–æ—á–Ω—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –°–ö–û. –°—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Å —Å–º–µ—â—ë–Ω–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –∏ –°–ö–û.
sam_ave = 0
for i in range(len(ni_list)):
    sam_ave += int2_list[i] * ni_list[i]
sam_ave /= 109
sam_ave = round(sam_ave, 2)
print("–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: ", sam_ave)
sam_var = 0
for i in range(len(ni_list)):
    sam_var += ((int2_list[i] - sam_ave) ** 2) * ni_list[i]
sam_var /= 109
sam_var = round(sam_var, 2)
print("–í—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è: ", sam_var)
com_sam_var = round(109/(109-1) * sam_var, 2)
print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è: ", com_sam_var)
cor_sko = round(math.sqrt(109/(109-1) * sam_var), 2)
print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –°–ö–û: ", cor_sko)
sko = round(math.sqrt(sam_var), 2)
print("–°–º–µ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –°–ö–û: ", sko)

# –ù–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏ —ç–∫—Å—Ü–µ—Å—Å–∞.
v1 = 0
for i in range(len(ni_list)):
    v1 += (int2_list[i] ** 1) * ni_list[i]
v1 /= 109
v2 = 0
for i in range(len(ni_list)):
    v2 += (int2_list[i] ** 2) * ni_list[i]
v2 /= 109
v3 = 0
for i in range(len(ni_list)):
    v3 += (int2_list[i] ** 3) * ni_list[i]
v3 /= 109
v4 = 0
for i in range(len(ni_list)):
    v4 += (int2_list[i] ** 4) * ni_list[i]
v4 /= 109
m3 = v3 - 3*v2*v1 + 2*(v1**3)
m4 = v4 - 4*v3*v1 + 6*v2*(v1**2) - 3*(v1**4)
assy = round(m3/(sko**3), 3)
ecce = round(m4/(sko**4) - 3, 3)
print("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞—Å—Å–∏–º–µ—Ç—Ä–∏–∏: ", assy)
print("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —ç–∫—Å—Ü–µ—Å—Å–∞: ", ecce)

# –í—ã—á–∏—Å–ª–∏—Ç—å –º–æ–¥—É, –º–µ–¥–∏–∞–Ω—É –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
x_m0 = int2_list[3]
m0 = x_m0 + h*((ni_list[3] - ni_list[2])/((ni_list[3] - ni_list[2]) + (ni_list[3] - ni_list[4])))
print("–ú–æ–¥–∞: ", m0)
x_me = int2_list[3]
me = round(x_me + h/pi_list[3]*(0.5 - acc_ni_list[2]/109), 2)
print("–ú–µ–¥–∏–∞–Ω–∞: ", me)

# –í—ã—á–∏—Å–ª–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –æ–±—ä—ë–º–µ –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ ùõæ ‚àà {0.95, 0.99}.
gamma1 = 0.95
gamma2 = 0.99
tg1 = 1.9822
tg2 = 2.6221
accuracy1 = round(tg1*cor_sko/math.sqrt(109)*math.sqrt(1-(109/400)), 2)
accuracy2 = round(tg2*cor_sko/math.sqrt(109)*math.sqrt(1-(109/400)), 2)
print("–¢–æ—á–Ω–æ—Å—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (0.95): ", accuracy1)
print("–¢–æ—á–Ω–æ—Å—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (0.99): ", accuracy2)
print("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (0.95): x–≥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç (", sam_ave - accuracy1, sam_ave + accuracy1, ")")
print("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (0.99): x–≥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç (", sam_ave - accuracy2, sam_ave + accuracy2, ")")

# –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ ùëû –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö ùõæ –∏ ùëõ.
q1 = 1.9822
q2 = 2.6221
print("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (0.95): (", 0, cor_sko + cor_sko*q1, ")")
print("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (0.99): (", 0, cor_sko + cor_sko*q2, ")")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫—Ä–∏—Ç–µ—Ä–∏—è ùúí2 (–ü–∏—Ä—Å–æ–Ω–∞). –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ —Ç–µ–æ-
# —Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è. –î–∞–ª–µ–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ ùõº = 0.05 –∏ —á–∏—Å–ª—É —Å—Ç–µ–ø–µ-
# –Ω–µ–π —Å–≤–æ–±–æ–¥—ã –Ω–∞–π—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—á–∫—É –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
pi_f = []
pi_f.append(round(scipy.stats.norm.cdf((359 - sam_ave)/cor_sko) - 0.5 + 0.5, 4))
for i in range(1, len(int_list) - 1):
    pi_f.append(round(scipy.stats.norm.cdf((int_list[i][1] - sam_ave)/cor_sko) - 0.5 - (scipy.stats.norm.cdf((int_list[i][0] - sam_ave)/cor_sko) - 0.5), 4))
pi_f.append(round(-scipy.stats.norm.cdf((554 - sam_ave)/cor_sko) + 0.5 + 0.5, 4))
ni_f = [round(i*109, 2) for i in pi_f]
print("pi     ni'")
for i in range(0, len(pi_f)):
    print(pi_f[i], ni_f[i])
nini_f = []
for i in range(0, len(ni_list)):
    nini_f.append((ni_list[i] - ni_f[i])**2)
nini_f_ni_f = []
for i in range(0, len(nini_f)):
    nini_f_ni_f.append(nini_f[i]/ni_f[i])
x_obs = round(sum(nini_f_ni_f), 1)
print("X–Ω–∞–±–ª^2 = ", x_obs)
alpha = 0.05
count = 4
x_crit = 9.5
print("X–∫—Ä–∏—Ç^2 = ", x_crit)
print("–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≥–∏–ø–æ—Ç–µ–∑–∞ –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫—Ä–∏—Ç–µ—Ä–∏—è –ü–∏—Ä—Å–æ–Ω–∞: ", x_obs < x_crit)

f.close()